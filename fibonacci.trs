.trml {
/*Root Node*/
Root RT;

/*Intermediary Nodes*/
Node IT;

/*Leaf Nodes with 0 and 1 as values*/
Node LF;

/*Fibonacci Tree Setup
     3
   /   \
  1     2
 / \   / \
0   1 1   1
*/
RT rt;
IT it1 -> rt;
IT it2 -> rt;
LF l1 -> it1;
LF l2 -> it1;
LF l3 -> it2;
LF l4 -> it2;

/*Forward Values Unused*/
l1 = ` int 0;
l2 = ` int 1;
l3 = ` int 1;
l4 = ` int 1;
}

/*These Declarations are for Show*/
int a;
int b;
int c;
int f (int a, int b, int c) {
    return 0;
}
forward RT -> IT (int parent) {
    ifne (False) {
        create parent.value @ 7;
    }
}

/*Backward Functions Actually Implement Program*/
backward `LF -> `IT (int parent) {
    int sum;
    sum = 0;
    for (i in [parent.children]) {
        sum = sum + i;
    }
    eval sum;
}

backward `IT -> `RT (int parent) {
    int sum;
    sum = 0;
    for (i in [parent.children]) {
        sum = sum + i;
    }
    eval sum;
}
